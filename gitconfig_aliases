# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# (c) barthel <barthel@users.noreply.github.com> https://github.com/barthel
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Include this file in ~/.gitconfig via:
# [include]
#   path = /path/to/gitconfig_aliases
#
# @see: http://git-scm.com/docs/git-config#_includes
#
[alias]
  ## global
  # Shows the email address used for commits.
  iam = !git config --get user.email
  # Get actual branch of current git repository.
  branchname = rev-parse --abbrev-ref HEAD
  # Get origin (push-) url
  origin-host-url = !sh -c 'pushurl=$(git config --local --get remote.origin.pushurl) echo ${pushurl:-$(git config --local --get remote.origin.url)}' -
  # Get host name of origin (push-) url
  origin-host-name = !git origin-host-url | sed 's|^.*[@]\\(.*\\)[/].*$|\\1|'
  # Add a new alias to global config.
  alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"
  # Pull and rebase changes and view change log.
  up = ! sh -c 'git pull --rebase && git log --pretty=format:\"%Cred%H%Creset %s %Cgreen(%ai [%ci]) %C(bold blue)<%an>%Creset\" ORIG_HEAD..'
  ## log
  # Show commit history as a colored graph.
  graph = log --graph --oneline --pretty=format:'%Cred%h%Creset-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  # A nice git log with branches shown as railroads.
  tree = log --oneline --graph --decorate --all
  # List all my commits since yesterday
  daily = !git log --pretty=format:\"%x20%cD%x20%x20%H%x20%s\" --all --since '1 day ago' --regexp-ignore-case --committer $(git iam)
  # List all my commits since last week.
  week = !git log --pretty=format:\"%x20%cD%x20%x20%H%x20%s\" --all --since '1 week ago' --regexp-ignore-case --committer $(git iam)
  ## issue based
  # Show all commits with the given issue id(s). 'git issue "0815\|4711"'
  issue = !sh -c 'ISSUE_NUMBER=$1 && shift 1 && git log --pretty=format:\"*%x20%H%x20%s\" --regexp-ignore-case --grep=\"$ISSUE_NUMBER\" $@' -
  # like 'issue' but extended with all affected file names per commit
  issue-with-files = !sh -c 'git issue $@ --name-only' -
  # like 'issue' but extended with commit date and time
  issue-with-time = !sh -c 'git issue $@ --pretty=format:\"*%x20%H%x20%cD%x20%x20%s\"' -
  # like 'issue' in reverse order for easier cherry-pick. formt: *[space]<commit-hash>[space]<commit-message>
  #issue-cherry-pick-list = !sh -c 'git issue $@ --pretty=format:\"%ct%x09*%x20%H%x20%s\" | sort --key=1.1,2.1 | cut -f 2' -
  issue-cherry-pick-list = !sh -c 'git issue $@ --reverse --pretty=format:\"*%x20%H%x20%s\"' -
  # like 'issue' but shows all affected files instead of the commit list
  issue-files-only = !sh -c 'git issue $@ --pretty=format: --name-only | grep \"\\w\" | sort | uniq | xargs file -Nn -- | grep -v ERROR | cut -d\":\" -f1' -
  # show all affected files of a commit
  files = !sh -c 'git show --pretty=format: --name-only $@ | grep \"\\w\" | sort | uniq | xargs file -Nn -- | grep -v ERROR | cut -d\":\" -f1' -